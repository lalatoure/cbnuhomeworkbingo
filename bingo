#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 5

void initialize();
void set_rand(int* array);
void swap(int* x, int* y);
void erase_bingo(int arr[][SIZE], int number);
void print_bingo(int arr[][SIZE]);
void print_winner(int winner);
int get_number(int from); // 0: user, 1: computer
int check_bingo(int arr[][SIZE]);

int ubingo[SIZE][SIZE];
int cbingo[SIZE][SIZE];

int checked[25] = { 0 }; // Array to store selected numbers
int count = 0;           // Count of selected numbers

int main() {
    int number, uwin, cwin;
    initialize(); // Initialize the bingo board (assign numbers)

    do {
        printf("User's Bingo Board:\n");
        print_bingo(ubingo); // Print the user's bingo board

        // User's turn
        number = get_number(0); // User selects a number
        erase_bingo(ubingo, number); // Remove the number from the user's board
        erase_bingo(cbingo, number); // Remove the number from the computer's board

        // Computer's turn
        number = get_number(1); // Computer selects a number
        erase_bingo(ubingo, number); // Remove the number from the user's board
        erase_bingo(cbingo, number); // Remove the number from the computer's board

        // Check if bingo is complete
        uwin = check_bingo(ubingo); // Check if the user completed bingo
        cwin = check_bingo(cbingo); // Check if the computer completed bingo

    } while ((uwin == 0) && (cwin == 0)); // Repeat if bingo is not complete

    // Final results
    printf("Final User's Bingo Board:\n");
    print_bingo(ubingo);
    printf("Final Computer's Bingo Board:\n");
    print_bingo(cbingo);
    printf("\n");

    print_winner(cwin * 2 + uwin); // Display the winner

    return 0;
}

// Initialize bingo boards
void initialize(void) {
    srand((unsigned int)time(NULL)); // Initialize random number generator

    // Initialize the user's and computer's bingo boards
    set_rand((int*)ubingo);
    set_rand((int*)cbingo);
}

// Randomly initialize the array
void set_rand(int* array) {
    int numbers[25];
    for (int i = 0; i < 25; i++) {
        numbers[i] = i + 1;
    }

    // Shuffle
    for (int i = 0; i < 25; i++) {
        int idx = rand() % 25;
        swap(&numbers[i], &numbers[idx]);
    }

    // Fill the bingo board
    for (int i = 0; i < 25; i++) {
        array[i] = numbers[i];
    }
}

// Swap two integers
void swap(int* x, int* y) {
    int temp = *x;
    *x = *y;
    *y = temp;
}

// Print the bingo board
void print_bingo(int arr[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (arr[i][j] == 0)
                printf("  0");
            else
                printf("%3d", arr[i][j]);
        }printf("\n");
    }
}

// Function to input and select a number
int get_number(int from) {
    int number;
    int value = 0;
    do {
        if (from == 0) {
            scanf("%d", &number);
            if (number < 1 || number>25) {
                continue;
        }
    }
        else if (from == 1) {
            number = (rand() % 25 + 1);
            
        }
        value = 0;
        for (int i = 0; i < count; i++) {
            if (checked[i] == number) {
                value = 1;
                break;
            }
        }
    } while (value==1);
    checked[count++] = number;
    return number;
}

// Remove a number from the bingo board
void erase_bingo(int arr[SIZE][SIZE], int number) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (arr[i][j] == number)
                arr[i][j] = 0;
        }
    }
}

// Check if bingo is complete
int check_bingo(int arr[SIZE][SIZE]) {
    int rowsum = 0;
    int colsum = 0;
    int xsum1 = 0, xsum2 = 0;
    for (int i = 0; i < SIZE; i++) {
        if(arr[i][i]==0) xsum1++;
        if (arr[i][SIZE - i - 1] == 0) xsum2++;
    }if (xsum1 == SIZE || xsum2 == SIZE)
        return 1;
    for (int i = 0; i < SIZE; i++) {
        rowsum = 0;
        colsum = 0;
        for (int j = 0; j < SIZE; j++) {
            rowsum += (arr[i][j]==0);
            colsum += (arr[j][i]==0);
            if (rowsum == SIZE || colsum == SIZE)
                return 1;
        }
    }return 0;
}

// Print the winner
void print_winner(int winner) {
    if (winner == 1) {
        printf("User wins!\n");
    }
    else if (winner == 2) {
        printf("Computer wins!\n");
    }
    else {
        printf("It's a draw.\n");
    }
}

